name: Generate Daily Markdown

on:
  schedule:
    - cron: '0 9 * * *'  # 每天UTC时间早上9:00（北京时间下午5:00自动运行）
  workflow_dispatch:  # 手动触发（用于调试和测试）
    inputs:
      debug_mode:
        description: '调试模式（输出更多日志信息）'
        required: false
        default: false
        type: boolean
      force_run:
        description: '强制运行（即使有最近的代码提交）'
        required: false
        default: false
        type: boolean
      test_mode:
        description: '测试模式（不提交到仓库）'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # 允许推送到仓库
  actions: write   # 允许触发其他工作流

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout auto-content branch
      uses: actions/checkout@v4
      with:
        ref: auto-content  # 使用专门的内容分支
        fetch-depth: 0     # 获取完整历史
        token: ${{ secrets.PAT || github.token }}

    - name: Smart sync from main branch
      run: |
        echo "🔄 智能同步 main 分支的最新代码..."

        # 配置 Git 用户信息
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        # 获取 main 分支的最新代码
        git fetch origin main

        # 检查 main 分支是否有新的提交
        MAIN_COMMIT=$(git rev-parse origin/main)
        LAST_SYNC_COMMIT=$(git log --grep="🔄 Auto-sync code from main branch" --format="%H" -1 2>/dev/null || echo "")

        if [ "$MAIN_COMMIT" != "$LAST_SYNC_COMMIT" ]; then
          echo "📝 检测到 main 分支有新提交，开始同步..."

          # 只同步代码文件，不同步内容文件
          git checkout origin/main -- scripts/ 2>/dev/null || echo "scripts/ 无变更"
          git checkout origin/main -- .github/ 2>/dev/null || echo ".github/ 无变更"
          git checkout origin/main -- requirements.txt 2>/dev/null || echo "requirements.txt 无变更"
          git checkout origin/main -- *.py 2>/dev/null || echo "Python 文件无变更"

          # 只同步根目录的 README.md，不同步 data 目录的 md 文件
          git checkout origin/main -- README.md 2>/dev/null || echo "README.md 无变更"

          # 检查是否有实际变更
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🔄 Auto-sync code from main branch $(date '+%Y-%m-%d %H:%M:%S UTC') - commit: ${MAIN_COMMIT:0:7}"
            echo "✅ 代码同步完成"
          else
            echo "ℹ️ 没有代码变更需要同步"
          fi
        else
          echo "ℹ️ main 分支没有新提交，跳过同步"
        fi

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install openai>=1.0.0 python-dotenv beautifulsoup4 pytz requests google-generativeai
        pip install python-wordpress-xmlrpc
        pip list  # 显示已安装的包及其版本

    - name: Generate Markdown with Optimizations
      env:
        # LLM提供商配置
        LLM_PROVIDER: ${{ secrets.LLM_PROVIDER || 'deepseek' }}

        # OpenAI配置
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_MODEL: ${{ secrets.OPENAI_MODEL || 'gpt-4o-2024-08-06' }}
        OPENAI_API_BASE: ${{ secrets.OPENAI_API_BASE }}

        # Gemini配置
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GEMINI_MODEL: ${{ secrets.GEMINI_MODEL || 'gemini-2.0-flash' }}
        GEMINI_API_BASE: ${{ secrets.GEMINI_API_BASE }}

        # DeepSeek配置
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        DEEPSEEK_MODEL: ${{ secrets.DEEPSEEK_MODEL || 'deepseek-chat' }}
        DEEPSEEK_API_BASE: ${{ secrets.DEEPSEEK_API_BASE }}

        # OpenRouter配置
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        OPENROUTER_MODEL: ${{ secrets.OPENROUTER_MODEL || 'deepseek/deepseek-chat-v3-0324' }}
        OPENROUTER_API_BASE: ${{ secrets.OPENROUTER_API_BASE }}

        # Product Hunt配置
        PRODUCTHUNT_DEVELOPER_TOKEN: ${{ secrets.PRODUCTHUNT_DEVELOPER_TOKEN }}
      run: |
        echo "🚀 使用优化版本生成内容..."
        echo "LLM提供商: $LLM_PROVIDER"
        echo "开始时间: $(date)"

        # 使用优化后的脚本
        python scripts/scripts_product_hunt_list_to_md.py

        echo "完成时间: $(date)"
        echo "✅ 内容生成完成"

    - name: 检查生成的内容
      run: |
        echo "📋 检查生成的内容..."
        if [ -d "data" ] && [ "$(ls -A data/*.md 2>/dev/null)" ]; then
          echo "✅ 发现生成的内容文件："
          ls -la data/
          echo "CONTENT_GENERATED=true" >> $GITHUB_ENV
        else
          echo "ℹ️ 没有发现新的内容文件"
          echo "CONTENT_GENERATED=false" >> $GITHUB_ENV
        fi

    - name: 直接推送内容到Hugo仓库
      if: env.CONTENT_GENERATED == 'true'
      run: |
        echo "🚀 直接推送生成的内容到Hugo仓库..."

        # 检查是否配置了Hugo仓库
        if [ -z "${{ secrets.HUGO_REPO_URL }}" ]; then
          echo "❌ 未配置HUGO_REPO_URL"
          echo "请在GitHub Secrets中设置HUGO_REPO_URL（格式：username/repo-name）"
          exit 1
        fi

        # 配置Git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # 克隆Hugo仓库
        echo "📥 克隆Hugo仓库: ${{ secrets.HUGO_REPO_URL }}"
        git clone https://${{ secrets.PAT }}@github.com/${{ secrets.HUGO_REPO_URL }}.git hugo-repo

        # 创建Hugo内容目录
        mkdir -p hugo-repo/content/posts

        # 复制生成的内容文件
        echo "📝 复制生成的内容文件到Hugo仓库..."
        cp data/*.md hugo-repo/content/posts/

        # 进入Hugo仓库目录
        cd hugo-repo

        # 显示复制的文件
        echo "📋 复制的文件："
        ls -la content/posts/

        # 检查是否有变更
        if [ -n "$(git status --porcelain)" ]; then
          echo "📝 检测到内容变更，准备提交..."
          echo "变更的文件："
          git status --short

          # 添加所有变更
          git add .

          # 提交变更
          git commit -m "🤖 Auto-generated Product Hunt daily content $(date '+%Y-%m-%d %H:%M:%S UTC')"

          # 获取最新的远程更改，避免冲突
          echo "🔄 获取最新的远程更改..."
          git fetch origin main

          # 尝试rebase，如果失败则使用merge
          if git rebase origin/main; then
            echo "✅ Rebase 成功"
          else
            echo "⚠️ Rebase 失败，尝试 merge..."
            git rebase --abort
            git merge origin/main -m "🔄 Merge remote changes"
          fi

          # 推送到Hugo仓库
          echo "🚀 推送到Hugo仓库..."
          git push origin main

          echo "✅ 成功推送内容到Hugo仓库"
          echo "🌐 Hugo网站将自动更新"
        else
          echo "ℹ️ 没有内容变更，跳过推送"
        fi

    - name: 清理本地生成的文件
      if: always()
      run: |
        echo "🧹 清理本地生成的文件..."
        rm -rf data/*.md 2>/dev/null || echo "没有需要清理的文件"
        echo "✅ 清理完成"

    - name: 工作流总结
      if: always()
      run: |
        echo "## 📊 优化版内容生成总结" >> $GITHUB_STEP_SUMMARY
        echo "- **执行时间**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **LLM 提供商**: ${{ env.LLM_PROVIDER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **使用脚本**: scripts_product_hunt_list_to_md.py (优化版)" >> $GITHUB_STEP_SUMMARY

        # 检查生成的文件
        if [ -f "data/producthunt-daily-$(date -u -d '1 day ago' '+%Y-%m-%d').md" ]; then
          file_size=$(wc -l < "data/producthunt-daily-$(date -u -d '1 day ago' '+%Y-%m-%d').md")
          echo "- **生成文件**: producthunt-daily-$(date -u -d '1 day ago' '+%Y-%m-%d').md ($file_size 行)" >> $GITHUB_STEP_SUMMARY
        fi

        # 显示优化功能
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 优化功能" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Hugo Front Matter 自动生成" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 智能标签和关键词生成" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Product Hunt 图片自动选择" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 清洁翻译（无翻译说明）" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 性能优化（10个精选产品）" >> $GITHUB_STEP_SUMMARY

        if [ "${{ job.status }}" == "success" ] && [ "${{ env.CONTENT_GENERATED }}" == "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **状态**: 内容生成成功，已直接推送到Hugo仓库" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Hugo网站**: 将自动构建和发布" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ job.status }}" == "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ **状态**: 工作流运行成功，但没有生成新内容" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **状态**: 内容生成失败" >> $GITHUB_STEP_SUMMARY
        fi