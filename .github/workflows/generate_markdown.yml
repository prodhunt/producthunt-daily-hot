name: Generate Daily Markdown

on:
  schedule:
    - cron: '01 7 * * *'  # 每天UTC时间早上7:01（北京时间下午3:01自动运行）
  workflow_dispatch:  # 手动触发
    inputs:
      force_run:
        description: '强制运行（即使有最近的代码提交）'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # 允许推送到仓库
  actions: write   # 允许触发其他工作流

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout auto-content branch
      uses: actions/checkout@v4
      with:
        ref: auto-content  # 使用专门的内容分支
        fetch-depth: 0     # 获取完整历史，以便同步代码

    - name: Sync code from main branch
      run: |
        echo "🔄 同步 main 分支的代码到 auto-content 分支..."

        # 配置 Git 用户信息
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        # 获取 main 分支的最新代码
        git fetch origin main

        # 同步代码文件（不包括 data 目录）
        git checkout origin/main -- scripts/ || echo "scripts/ 目录不存在或无变更"
        git checkout origin/main -- .github/ || echo ".github/ 目录不存在或无变更"
        git checkout origin/main -- requirements.txt || echo "requirements.txt 不存在或无变更"
        git checkout origin/main -- *.py || echo "Python 文件不存在或无变更"
        git checkout origin/main -- *.md || echo "Markdown 文件不存在或无变更"

        # 检查是否有代码更改需要提交
        if [ -n "$(git status --porcelain)" ]; then
          echo "📝 检测到代码更改，提交同步..."
          git add .
          git commit -m "🔄 Auto-sync code from main branch $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "✅ 代码同步完成"
        else
          echo "ℹ️ 没有代码更改需要同步"
        fi

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install openai>=1.0.0 python-dotenv beautifulsoup4 pytz requests google-generativeai
        pip install python-wordpress-xmlrpc
        pip list  # 显示已安装的包及其版本

    - name: Generate Markdown with Optimizations
      env:
        # LLM提供商配置
        LLM_PROVIDER: ${{ secrets.LLM_PROVIDER || 'deepseek' }}

        # OpenAI配置
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_MODEL: ${{ secrets.OPENAI_MODEL || 'gpt-4o-2024-08-06' }}
        OPENAI_API_BASE: ${{ secrets.OPENAI_API_BASE }}

        # Gemini配置
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GEMINI_MODEL: ${{ secrets.GEMINI_MODEL || 'gemini-2.0-flash' }}
        GEMINI_API_BASE: ${{ secrets.GEMINI_API_BASE }}

        # DeepSeek配置
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        DEEPSEEK_MODEL: ${{ secrets.DEEPSEEK_MODEL || 'deepseek-chat' }}
        DEEPSEEK_API_BASE: ${{ secrets.DEEPSEEK_API_BASE }}

        # OpenRouter配置
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        OPENROUTER_MODEL: ${{ secrets.OPENROUTER_MODEL || 'deepseek/deepseek-chat-v3-0324' }}
        OPENROUTER_API_BASE: ${{ secrets.OPENROUTER_API_BASE }}

        # Product Hunt配置
        PRODUCTHUNT_DEVELOPER_TOKEN: ${{ secrets.PRODUCTHUNT_DEVELOPER_TOKEN }}
      run: |
        echo "🚀 使用优化版本生成内容..."
        echo "LLM提供商: $LLM_PROVIDER"
        echo "开始时间: $(date)"

        # 使用优化后的脚本
        python scripts/scripts_product_hunt_list_to_md.py

        echo "完成时间: $(date)"
        echo "✅ 内容生成完成"

    - name: Commit and Push changes
      run: |
        # 配置 Git 用户信息
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        # 添加文件
        git add .

        # 检查是否有变更
        if [ -n "$(git status --porcelain)" ]; then
          echo "📝 检测到文件变更，准备提交..."
          git commit -m "🤖 Auto-generated daily content $(date '+%Y-%m-%d %H:%M:%S UTC')"

          # 推送变更到内容分支（使用 PAT 或 GITHUB_TOKEN）
          if [ -n "${{ secrets.PAT }}" ]; then
            echo "🔑 使用 PAT 推送到 auto-content 分支..."
            git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git HEAD:auto-content
          else
            echo "🔑 使用 GITHUB_TOKEN 推送到 auto-content 分支..."
            git push https://${{ github.token }}@github.com/${{ github.repository }}.git HEAD:auto-content
          fi

          echo "✅ 成功推送到仓库"
        else
          echo "ℹ️ 没有文件变更，跳过提交"
        fi

    - name: 触发 Hugo 发布工作流
      if: success()
      run: |
        echo "🚀 触发 Hugo 发布工作流..."

        curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.PAT }}" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{
            "event_type": "content-generated",
            "client_payload": {
              "triggered_by": "generate_markdown",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "commit_sha": "${{ github.sha }}"
            }
          }'

        if [ $? -eq 0 ]; then
          echo "✅ 成功触发 Hugo 发布工作流"
        else
          echo "❌ 触发 Hugo 发布工作流失败"
          exit 1
        fi

    - name: 工作流总结
      if: always()
      run: |
        echo "## 📊 优化版内容生成总结" >> $GITHUB_STEP_SUMMARY
        echo "- **执行时间**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **LLM 提供商**: ${{ env.LLM_PROVIDER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **使用脚本**: scripts_product_hunt_list_to_md.py (优化版)" >> $GITHUB_STEP_SUMMARY

        # 检查生成的文件
        if [ -f "data/producthunt-daily-$(date -u -d '1 day ago' '+%Y-%m-%d').md" ]; then
          file_size=$(wc -l < "data/producthunt-daily-$(date -u -d '1 day ago' '+%Y-%m-%d').md")
          echo "- **生成文件**: producthunt-daily-$(date -u -d '1 day ago' '+%Y-%m-%d').md ($file_size 行)" >> $GITHUB_STEP_SUMMARY
        fi

        # 显示优化功能
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 优化功能" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Hugo Front Matter 自动生成" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 智能标签和关键词生成" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Product Hunt 图片自动选择" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 清洁翻译（无翻译说明）" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 性能优化（10个精选产品）" >> $GITHUB_STEP_SUMMARY

        if [ "${{ job.status }}" == "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **状态**: 内容生成成功，已触发 Hugo 发布" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **状态**: 内容生成失败" >> $GITHUB_STEP_SUMMARY
        fi